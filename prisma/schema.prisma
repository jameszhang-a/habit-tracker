generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["driverAdapters"]
}

datasource db {
    relationMode = "prisma"
    provider     = "sqlite"
    url          = "file:./dev.db"
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid()) // clegntvpo00003v055qnjrwxv
    name          String
    email         String    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Habit         Habit[]

    // configurations
    theme      String @default("default")
    lightTheme String @default("dark")
    timezone   String @default("America/New_York")

    notionToken String?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Habit {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name         String
    emoji        String     @default("ðŸ”¥")
    user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId       String
    frequency    Int        @default(1)
    goal         Int        @default(1)
    inversedGoal Boolean    @default(false)
    HabitLog     HabitLog[]
    order        Int        @default(0)
    archived     Boolean    @default(false)

    @@index([userId])
}

model HabitLog {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    habit     Habit    @relation(fields: [habitId], references: [id], onDelete: Cascade)
    habitId   String
    date      DateTime
    completed Boolean  @default(false)

    weekKey String @default("")

    @@index([habitId])
}
